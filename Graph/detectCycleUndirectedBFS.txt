#include <bits/stdc++.h>
using namespace std;
bool bfsCycle(int node,int V,vector<int>&visited,vector<int>adj[])
{
    vector<int>parent(V,-1);
    queue<pair<int,int>>q;
    visited[node]=true;
    q.push({node,-1});
    while(q.size()>0)
    {
        int node=q.front().first;
        int par=q.front().second;
        q.pop();
        for(auto it:adj[node])
        {
            if(!visited[it])
            {
                visited[it]=true;
                q.push({it,node});
            }
            else if(it!=par)
            {
                return true;
            }
        }
    }
     return false;
}
bool isCycle(int V,vector<int>adj[])
{
    vector<int>vis(V,0);
    for(int i=0;i<V;i++)
    {
        if(!vis[i])
        {
            if(bfsCycle(i,V,vis,adj))
            return true;
        }
    }
    return false;
}
int main() {
   	int V, E;
		cin >> V >> E;
		vector<int>adj[V];
		for(int i = 0; i < E; i++){
			int u, v;
			cin >> u >> v;
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		bool ans =isCycle(V, adj);
		if(ans)
			cout << "1\n";
		else cout << "0\n";
}
