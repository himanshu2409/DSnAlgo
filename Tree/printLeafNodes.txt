#include<bits/stdc++.h>
using namespace std;
struct TreeNode
{
    int data;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val)
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};
void getLeafNode(TreeNode *root)
{
    if(!root)
        return;
    if(!root->left && !root->right){
    cout<<root->data<<" ";
    return;
    }
    if(root->left)
    getLeafNode(root->left);
    if(root->right)
    getLeafNode(root->right);
}
void inOrder(TreeNode *root)
{
    if(root==NULL)
        return;
    inOrder(root->left);
    cout<<root->data<<"->";
    inOrder(root->right);
}

int main() {
    struct TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->right->left = new TreeNode(5);
    root->right->right = new TreeNode(8);
    root->right->left->left = new TreeNode(6);
    root->right->left->right = new TreeNode(7);
    root->right->right->left = new TreeNode(9);
    root->right->right->right = new TreeNode(10);
 
     
    /* Print inorder traversal of the mirror tree */
    cout << "\nInorder traversal of the mirror tree"<< " is \n";
    getLeafNode(root);
     
    return 0;
}