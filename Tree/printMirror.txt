#include<bits/stdc++.h>
using namespace std;
struct TreeNode
{
    int data;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int val)
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};
void mirror(TreeNode *root)
{
    if(root==NULL)
        return;
    else
    {
        TreeNode *temp;
        mirror(root->left);
        mirror(root->right);
        temp=root->left;
        root->left=root->right;
        root->right=temp;
    }
}
void inOrder(TreeNode *root)
{
    if(root==NULL)
        return;
    inOrder(root->left);
    cout<<root->data<<"->";
    inOrder(root->right);
}

int main() {
    struct TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
     
    /* Print inorder traversal of the input tree */
    cout << "Inorder traversal of the constructed"<< " tree is" << endl;
    inOrder(root);
     
    /* Convert tree to its mirror */
    mirror(root);
     
    /* Print inorder traversal of the mirror tree */
    cout << "\nInorder traversal of the mirror tree"<< " is \n";
    inOrder(root);
     
    return 0;
}