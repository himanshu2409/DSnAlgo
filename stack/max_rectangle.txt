#include<bits/stdc++.h>
using namespace std;
vector<int> NSL(int arr[],int n)
{
    vector<int>v;
    stack<pair<int,int>>s;
    for(int i=0;i<n;i++)
    {
        if(s.size()==0)
        {
            v.push_back(-1);
        }
        else if(s.size()>0 && s.top().first<arr[i])
        {
            v.push_back(s.top().second);
        }
        else if(s.size()>0 && s.top().first>=arr[i])
        {
            while(s.size()>0 && s.top().first>=arr[i])
            {
                s.pop();
            }
            if(s.size()==0)
            {
                v.push_back(-1);
            }
            else
            {
                v.push_back(s.top().second);
            }
        }
         s.push({arr[i],i});
    }
    return v;
}
vector<int> NSR(int arr[],int n)
{
    vector<int>v;
    stack<pair<int,int>>s;
    for(int i=n-1;i>=0;i--)
    {
        if(s.size()==0)
        {
            v.push_back(n);
        }
        else if(s.size()>0 && s.top().first<arr[i])
        {
            v.push_back(s.top().second);
        }
        else if(s.size()>0 && s.top().first>=arr[i])
        {
            while(s.size()>0 && s.top().first>=arr[i])
            {
                s.pop();
            }
            if(s.size()==0)
            {
                v.push_back(n);
            }
            else
            {
                v.push_back(s.top().second);
            }
        }
         s.push({arr[i],i});
    }
    reverse(v.begin(),v.end());
    return v;
}

int MAH(int arr[],int n)
{
    vector<int>left=NSL(arr,n);
    vector<int>right=NSR(arr,n);
    int width[n],area[n];
    int max=0;
    vector<int>v;
   for(int i=0;i<n;i++)
   {
       width[i]=right[i]-left[i]-1;
   }
   for(int i=0;i<n;i++)
   {
       area[i]=arr[i]*width[i];
      if(max<area[i])
      max=area[i];
   }
   return max;
}
int maxArea(vector<vector<int>>& a)
{
    int row,col;
    row=a.size();
    col=a[0].size();
    int temp[col]={0};
    int ans=0;
    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
            if(a[i][j]!=0)
            temp[j]=temp[j]+a[i][j];
            else
            temp[j]=0;
            ans=max(ans,MAH(temp,col));
    }
    return ans;
}
int main() {
     int n,m;
     cin>>n>>m;
       
    vector<vector<int>> vec( n , vector<int> (m, 0));
    for(int i = 0; i < n; i++)
    {
        for(int j = 0; j < m; j++)
        {
            cin>>vec[i][j];
        }
    }
     }
      int ans=maxArea(vec);
      cout<<ans<<endl;
}